import { getEveryAccessibleServerMonies } from "/lib/money.ns";
import { gainRootAccess } from "/lib/root.ns";
import { isHackable } from "/lib/hack.ns";

/** @param {NS} ns **/
export async function main(ns) {
    var filename = "/bin/hack.ns";
    if (!ns.fileExists(filename)) {
        ns.tprint(`invalid file to deploy: ${filename} does not exist`);
        return;
    }

    var target = "";
    var maxMoney = 0;

    var serverMonies = new Map();
    getEveryAccessibleServerMonies(ns, serverMonies);
    serverMonies.forEach((potentialValue, potentialTarget) => {
        if (potentialValue > maxMoney && isHackable(ns, potentialTarget) && gainRootAccess(ns, potentialTarget)) {
            target = potentialTarget;
            maxMoney = potentialValue;
        }
    });

    ns.tprint(`target=${target} maxMoney=${maxMoney}`);

    var moneyThreshold = maxMoney * 0.75;
    var securityThreshold = ns.getServerMinSecurityLevel(target) + 5;

    // redeploy /bin/hack.ns with args
    ns.tprint(`starting target=${target} moneyThreshold=${moneyThreshold} securityThreshold=${securityThreshold}`);
    ns.spawn("/bin/deploy.ns", 1, filename, target, moneyThreshold.toString(), securityThreshold.toString());
}
